<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>嵌入式linux下进程内存占用分析</title>
      <link href="/2019/11/27/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/27/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在嵌入式linux下，可以通过cat /proc/进程号/smas查看该进程的内存使用情况<br>在smaps文件中，每一条记录（如下所示）表示进程虚拟内存空间中一块连续的区域。其中第一行从左到右依次表示地址范围、权限标识、映射文件偏移、设备号、inode、文件路径。<br>smaps部分内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">2e37a000-2e3b5000 r-xp 00000000 b3:01 4151       /opt/qt4.8.6/lib/libQtXml.so.4.8.6</span><br><span class="line">Size:                236 kB</span><br><span class="line">Rss:                  52 kB</span><br><span class="line">Pss:                  52 kB</span><br><span class="line">Shared_Clean:          0 kB</span><br><span class="line">Shared_Dirty:          0 kB</span><br><span class="line">Private_Clean:        52 kB</span><br><span class="line">Private_Dirty:         0 kB</span><br><span class="line">Referenced:           52 kB</span><br><span class="line">Anonymous:             0 kB</span><br><span class="line">AnonHugePages:         0 kB</span><br><span class="line">Swap:                  0 kB</span><br><span class="line">KernelPageSize:        4 kB</span><br><span class="line">MMUPageSize:           4 kB</span><br><span class="line">Locked:                0 kB</span><br><span class="line">2e3b5000-2e3bc000 ---p 0003b000 b3:01 4151       /opt/qt4.8.6/lib/libQtXml.so.4.8.6</span><br><span class="line">Size:                 28 kB</span><br><span class="line">Rss:                   0 kB</span><br><span class="line">Pss:                   0 kB</span><br><span class="line">Shared_Clean:          0 kB</span><br><span class="line">Shared_Dirty:          0 kB</span><br><span class="line">Private_Clean:         0 kB</span><br><span class="line">Private_Dirty:         0 kB</span><br><span class="line">Referenced:            0 kB</span><br><span class="line">Anonymous:             0 kB</span><br><span class="line">AnonHugePages:         0 kB</span><br><span class="line">Swap:                  0 kB</span><br><span class="line">KernelPageSize:        4 kB</span><br><span class="line">MMUPageSize:           4 kB</span><br><span class="line">Locked:                0 kB</span><br></pre></td></tr></table></figure></p><p>接下来8个字段的含义分别如下：</p><p>Size：表示该映射区域在虚拟内存空间中的大小。<br>Rss：表示该映射区域当前在物理内存中占用了多少空间　　　　　　<br>Shared_Clean：和其他进程共享的未被改写的page的大小<br>Shared_Dirty： 和其他进程共享的被改写的page的大小<br>Private_Clean：未被改写的私有页面的大小。<br>Private_Dirty： 已被改写的私有页面的大小。<br>Swap：表示非mmap内存（也叫anonymous memory，比如malloc动态分配出来的内存）由于物理内存不足被swap到交换空间的大小。<br>Pss：该虚拟内存区域平摊计算后使用的物理内存大小(有些内存会和其他进程共享，例如mmap进来的)。比如该区域所映射的物理内存部分同时也被另一个进程映射了，且该部分物理内存的大小为1000KB，那么该进程分摊其中一半的内存，即Pss=500KB。 </p><p>以下是快速计算的命令，也可以通过cat /proc/进程号/status查看<br>计算某进程的内存实际占用<br>如进程号为12713,则<br>cat /proc/12713/smaps |grep ^Rss|awk ‘{s+=$2}END{print “sum=”s}’<br>计算某进程的虚拟内存占用<br>cat /proc/12713/smaps |grep ^Size|awk ‘{s+=$2}END{print “sum=”s}’</p><p>awk将输出的数据进行统计</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用mongoose搭建嵌入式网页服务器(二)</title>
      <link href="/2019/05/21/%E4%BD%BF%E7%94%A8mongoose%E6%90%AD%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%BA%8C/"/>
      <url>/2019/05/21/%E4%BD%BF%E7%94%A8mongoose%E6%90%AD%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用mongoose搭建嵌入式网页服务器(一)</title>
      <link href="/2019/05/21/%E4%BD%BF%E7%94%A8mongoose%E6%90%AD%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/05/21/%E4%BD%BF%E7%94%A8mongoose%E6%90%AD%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cesanta/mongoose</span><br></pre></td></tr></table></figure><h1 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mongoose/examples/simplest_web_server</span><br><span class="line">make</span><br><span class="line">./simplest_web_server</span><br></pre></td></tr></table></figure><p>以上，就是一个最简单的web服务器了<br>不过只显示了当前目录下的文件，接下来我们就基于这个demo，制作自己的小网站</p><p>创建一个目录web，将mongoose/mongoose.c,mongoose/mongoose.h,mongoose/examples/simplest_web_server/simplest_web_server.c 复制到这个目录下</p><p>之后编写编译脚本，也可以写Makefile,随意〜〜<br>以下是我的编译脚本build.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc mongoose.c simplest_web_server.c -o web</span><br></pre></td></tr></table></figure></p><p>build.sh权限，chmod 777 build.sh<br>以后就可以执行./build.sh编译了</p><h1 id="编写自己的网页"><a href="#编写自己的网页" class="headerlink" title="编写自己的网页"></a>编写自己的网页</h1><p>修改simplest_web_server.c,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mongoose.h&quot;</span><br><span class="line"> </span><br><span class="line">static const char *s_http_port = &quot;8000&quot;;</span><br><span class="line">static struct mg_serve_http_opts s_http_server_opts;</span><br><span class="line"> </span><br><span class="line">static void ev_handler(struct mg_connection *nc, int ev, void *p) &#123;</span><br><span class="line">    if (ev == MG_EV_HTTP_REQUEST) &#123;</span><br><span class="line">        struct http_message *msg=(struct http_message*)p;</span><br><span class="line">        //限制浏览器的入口，只能访问/,或者/index,都会指向index.html这个文件</span><br><span class="line">        if(mg_vcmp(&amp;msg-&gt;uri,&quot;/index&quot;)==0 ||mg_vcmp(&amp;msg-&gt;uri,&quot;/&quot;)==0)</span><br><span class="line">        &#123;</span><br><span class="line">          mg_http_server_file(nc, msg,&quot;index.html&quot;,mg_mk_str(&quot;text/html&quot;),mg_mk_str(&quot;&quot;));    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main(void) &#123;</span><br><span class="line">    struct mg_mgr mgr;</span><br><span class="line">    struct mg_connection *nc;</span><br><span class="line">  </span><br><span class="line">    mg_mgr_init(&amp;mgr, NULL);</span><br><span class="line">    printf(&quot;Starting web server on port %s\n&quot;, s_http_port);</span><br><span class="line">    nc = mg_bind(&amp;mgr, s_http_port, ev_handler);//绑定端口与事件处理器</span><br><span class="line">    if (nc == NULL) &#123;</span><br><span class="line">      printf(&quot;Failed to create listener\n&quot;);</span><br><span class="line">      return 1;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    mg_set_protocol_http_websocket(nc);</span><br><span class="line">    s_http_server_opts.document_root = &quot;.&quot;;  // 设置网页的根目录</span><br><span class="line">    s_http_server_opts.enable_directory_listing = &quot;no&quot;;//关闭本地文件的显示</span><br><span class="line">  </span><br><span class="line">    for (;;) &#123;</span><br><span class="line">      mg_mgr_poll(&amp;mgr, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    mg_mgr_free(&amp;mgr);</span><br><span class="line">  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外编辑一个index.html文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;H2&gt;Hello world!&lt;H2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>执行./build.sh<br>再执行./web<br>打开浏览器，输入<a href="http://127.0.0.1:8000/即可看到网页内容" target="_blank" rel="noopener">http://127.0.0.1:8000/即可看到网页内容</a></p><p>如果是放在板子上运行，只需将build.sh的编译命令改下，重新编译后，把执行文件和网页丢板上就好，比起boa来， 这个更容易懂些，也容易扩展些</p><p>以上是普通静态网页的做法，后面将会更新动态网页的写法，敬请期待〜〜</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式linux下使用mutt发送带附件的邮件</title>
      <link href="/2019/05/21/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E4%BD%BF%E7%94%A8mutt%E5%8F%91%E9%80%81%E5%B8%A6%E9%99%84%E4%BB%B6%E7%9A%84%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/05/21/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E4%BD%BF%E7%94%A8mutt%E5%8F%91%E9%80%81%E5%B8%A6%E9%99%84%E4%BB%B6%E7%9A%84%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>之前已经使用msmtp成功发送了邮件，但如果要发送带附件的邮件，就需要配合mutt了</p><h1 id="编译mutt"><a href="#编译mutt" class="headerlink" title="编译mutt"></a>编译mutt</h1><p>编译mutt前，要先编译openssl和ncurses这两个库，编译方法就不在这说了<br>在mutt官网上虽然有下载链接，但下不了，还好在github上找到了项目的源码，地址是<a href="https://github.com/muttmua/mutt" target="_blank" rel="noopener">https://github.com/muttmua/mutt</a><br>可以使用git clone命令，或者直接下载zip包<br>下载后进入到源码目录，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./prepare #生成configure</span><br><span class="line"></span><br><span class="line">./configure --host=arm-linux --prefix=/opt/mutt --with-curses=/opt/ncurses -with-ssl CFLAGS=&quot;-I/opt/ncurses/include -I/opt/ncurses/include/ncurses -I/opt/openssl -L/opt/openssl/lib -lssl -lcrypto -L/opt/ncurses/lib&quot; LD=arm-linux-ld --disable-doc --disable-filemonitor</span><br><span class="line"></span><br><span class="line">make &amp;&amp;make install</span><br></pre></td></tr></table></figure></p><p>将编译生成的mutt丢到板子上的/bin目录<br>这里提供一个现成的<br>点击下载：<a href="/tools/mutt.tar.gz">mutt.tar.gz</a><br>执行mutt的时候有可能会出现vt100这类的错误,解决方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export TERM=vt100</span><br><span class="line">export TERMINFO=/usr/share/terminfo/v</span><br></pre></td></tr></table></figure><p>如果系统中没有/usr/share/terminfo/v/vt100这个文件，就需要将pc上的文件复制过来了</p><h1 id="使用mutt发邮件"><a href="#使用mutt发邮件" class="headerlink" title="使用mutt发邮件"></a>使用mutt发邮件</h1><p>发送邮件前需要准备下配置文件</p><h2 id="etc-msmpt-conf"><a href="#etc-msmpt-conf" class="headerlink" title="/etc/msmpt.conf"></a>/etc/msmpt.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">host smtp.163.com  </span><br><span class="line">port 465</span><br><span class="line">auth login</span><br><span class="line">tls on</span><br><span class="line">tls_starttls off</span><br><span class="line">tls_certcheck off          #关闭cert证书的检测，嵌入式下不关闭会有问题</span><br><span class="line">proxy_host 192.168.162.85  #这里使用了代理</span><br><span class="line">from xxxx@163.com</span><br><span class="line">user xxxx@163.com</span><br><span class="line">password xxxxxx</span><br><span class="line">timeout 10</span><br><span class="line">logfile /var/log/msmtp.log</span><br></pre></td></tr></table></figure><h2 id="etc-mutt-conf"><a href="#etc-mutt-conf" class="headerlink" title="/etc/mutt.conf"></a>/etc/mutt.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set sendmail=&quot;/bin/msmtp -C /etc/msmtp.conf&quot;</span><br><span class="line">set use_from=yes</span><br><span class="line">set realname=&quot;xxxxx&quot;</span><br><span class="line">set editor=&quot;vi&quot;</span><br><span class="line">set from=xxxx@163.com  #这里必须和msmtp的一样</span><br><span class="line">set envelope_from=yes</span><br></pre></td></tr></table></figure><p>准备好配置文件后，就可以试试发送邮件了<br>echo “hello world!”|mutt -s “hello,boy” <a href="mailto:277835572@qq.com" target="_blank" rel="noopener">277835572@qq.com</a> -a hello.jpg -F /etc/mutt.conf</p><p>hello world!是邮件的内容，hello,boy是邮件的主题，后面接着接收人邮件地址，hello.jpg是附件，最后指定mutt的配置文件，这样就算大功告成啦</p><p>也可以预先把邮件内容写到某个文件中<br>cat mail.txt |mutt -s “hello” <a href="mailto:277835572@qq.com" target="_blank" rel="noopener">277835572@qq.com</a> -a hello.jpg -F /etc/mutt.conf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式linux下使用msmtp发送邮件</title>
      <link href="/2019/05/13/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E4%BD%BF%E7%94%A8msmtp%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/05/13/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux%E4%B8%8B%E4%BD%BF%E7%94%A8msmtp%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="编译msmtp"><a href="#编译msmtp" class="headerlink" title="编译msmtp"></a>编译msmtp</h1><p>arm gcc版本:4.8.3<br>源码地址:<a href="https://marlam.de/msmtp/download/" target="_blank" rel="noopener">https://marlam.de/msmtp/download/</a><br>下载后解压，执行以下命令生成Makefile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --host=arm-linux --prefix=/opt/msmtp libssl_CFLAGS=&quot;-I/share/env-dtu/include&quot; libssl_LIBS=&quot;-L/share/env-dtu/lib -lssl -lcrypto&quot; --with-tls=openssl </span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>虽然官方推荐使用gnutls作为tls的加密组件，但总是编译不过，只好使用openssl<br>openssl的编译方法这里就不提供了<br>编译完成后，把src下的msmtp复制到开发板中的/bin下，编译这事就算完了<br>这里提供一个现成的<br>点击下载：<a href="/tools/msmtp.tar.gz">msmtp.tar.gz</a></p><h1 id="使用msmtp"><a href="#使用msmtp" class="headerlink" title="使用msmtp"></a>使用msmtp</h1><p>接下来是使用msmtp发送邮件<br>首先准备好一个配置文件,命名为msmtp.conf，存放在/etc下，内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">host smtp.163.com          #邮箱服务器地址</span><br><span class="line">port 465                   #邮箱端口，一般465就是ssl加密端口</span><br><span class="line">auth login                 #启用登陆功能，现代服务器一般都需要验证的</span><br><span class="line">tls on                     #启用ssl加密码</span><br><span class="line">tls_starttls off           #关闭starttls功能，一般只在非加密码环境下使用</span><br><span class="line">tls_certcheck off          #关闭cert证书的检测</span><br><span class="line">from xxxx@163.com          #发件人邮箱</span><br><span class="line">user xxxx@163.com          #邮箱账号</span><br><span class="line">password xxxxxx            #邮箱密码</span><br><span class="line">timeout 10                 #发送超时</span><br><span class="line">logfile /var/log/msmtp.log #设置日志记录文件</span><br></pre></td></tr></table></figure></p><p>接下来编写一封邮件，命名为mail,格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Date:Mon May 13 18:16:30 UTC 2019</span><br><span class="line">Form:xxxx@163.com</span><br><span class="line">To:taoyb@eastups.com</span><br><span class="line">Subject:test</span><br><span class="line"></span><br><span class="line">this is a test!</span><br></pre></td></tr></table></figure></p><p>第一行时间通过date命令得知，邮件内容之前要空一行<br>之后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msmtp -C /etc/msmtp.conf -t &lt;mail</span><br></pre></td></tr></table></figure></p><p>-C 指定配置文件<br>-t 用于接收mail的内容</p><p>以上就是使用msmtp发送163邮件的方法,接下来是一些常用操作</p><h1 id="使用代理服务器发送邮件"><a href="#使用代理服务器发送邮件" class="headerlink" title="使用代理服务器发送邮件"></a>使用代理服务器发送邮件</h1><p>代理只能使用sock v5的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msmtp -C /etc/msmtp.conf --proxy-host=192.168.162.85 -t &lt;mail</span><br></pre></td></tr></table></figure></p><h1 id="发送不加密的邮件"><a href="#发送不加密的邮件" class="headerlink" title="发送不加密的邮件"></a>发送不加密的邮件</h1><p>编缉配置文件，将port 改为25,tls改为off<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msmtp -C /etc/msmtp.conf -t &lt;mail</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大量time wait的处理方法</title>
      <link href="/2019/04/30/%E5%A4%A7%E9%87%8Ftime-wait%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/30/%E5%A4%A7%E9%87%8Ftime-wait%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>有一天，自己的开发的服务软件连接不上了，ssh进到系统，netstat -an发现存在大量time wait信息<br>在网上查询到如下描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在高并发短连接的TCP服务器上，当服务器处理完请求后立刻主动正常关闭连接。</span><br><span class="line">这个场景下会出现大量socket处于TIME_WAIT状态。如果客户端的并发量持续很高，</span><br><span class="line">此时部分客户端就会显示连接不上。</span><br></pre></td></tr></table></figure></p><p>解决方法如下:<br>将以下内容写入/etc/sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br></pre></td></tr></table></figure></p><p>然后执行 /sbin/sysctl -p 让参数生效。</p><p>net.ipv4.tcp_syncookies = 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</p><p>net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</p><p>net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</p><p>net.ipv4.tcp_fin_timeout 修改系統默认的 TIMEOUT 时间</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式syslog编译与使用</title>
      <link href="/2019/04/30/%E5%B5%8C%E5%85%A5%E5%BC%8Fsyslog%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/30/%E5%B5%8C%E5%85%A5%E5%BC%8Fsyslog%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>busybox下的syslogd不能同时监控多个log，所以需要自己编译一个</p><h2 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h2><p>该工具在inetutils工具包内<br>首先下载安装包，然后解压，编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.gnu.org/gnu/inetutils/inetutils-1.5.tar.gz</span><br><span class="line">tar xvf inetutils-1.5.tar.gz &amp;&amp; cd inetutils-1.5</span><br><span class="line">CC=arm-none-linux-gnueabi-gcc LDFLAGS=-static ./configure --disable-clients --disable-ipv6 --disable-ncurses --host=arm --prefix=/opt/inetutils</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>之后可在src/下找到syslogd，将之复制到开发板的/sbin目录内</p><p>但syslog不支持多线程打印，当两条线程同时使用时，需要自行加锁<br>rsyslog是syslog的升级版，支持多线程<br>编译步骤一样，但需要多安装一些库,这里就不多说了</p><p>syslog可以通过配置文件控制日志的输出，但不能指定日志的大小<br>所以需要用到logrotate命令</p><h2 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h2><p>logrotate是linux中日志管理的重要工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。在发行版的桌面或者服务器linux系统中这个工具安装一般都是比较容易，或者默认已经自带，但是嵌入式系统一般需要通过源码来自己构建。</p><p>先安装编译依赖工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libtool-bin</span><br><span class="line">apt-get install autopoint</span><br></pre></td></tr></table></figure></p><h2 id="构建POPT库"><a href="#构建POPT库" class="headerlink" title="构建POPT库"></a>构建POPT库</h2><p>由于logrotate依赖于POPT库，所以要生成logrotate需要先构建POPT库，然后再利用POPT库构建logrotate。<br>下载最新的master分支源码包,并编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/devzero2000/POPT</span><br></pre></td></tr></table></figure></p><p>由于源码是基于autotools编译的，所以需要安装以下两个依赖工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libtool </span><br><span class="line">apt-get install autoconf</span><br></pre></td></tr></table></figure></p><p>第一次编译需要先生成configure,执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh</span><br></pre></td></tr></table></figure></p><p>之后就可以使用configure这个程序来生成Makefile了，比如下面就是生成 arm版的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/POPT --host=arm-linux</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>构建好后会在/opt/POPT 生成“include  lib  share” 三个目录，其中lib目录有logrotate编译和运行需要的库文件，include目录有我们编译logrotate需要的头文件。</p><h2 id="构建logrotate"><a href="#构建logrotate" class="headerlink" title="构建logrotate"></a>构建logrotate</h2><p>下载最新的源码logrotate,并编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/logrotate/logrotate </span><br><span class="line">./autogen.sh</span><br><span class="line">#./configure --host=arm-linux --prefix=/opt/logrotate LDFLAGS=-L/opt/POPT/lib CPPFLAGS=-I/opt/POPT/include</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>其中LDFLAGS指定logrotate编译依赖库lpopt路径；而CPPFLAGS指定logrotate编译依赖头文件popt.h路径。<br>构建好后会在/opt/logrotate目录生成sbin/logrotate文件。</p><p>将/opt/POPT/lib/libpopt.so.0.0.0 复制到开发板的/lib下，并将名称改为libpopt.so.0<br>将/opt/logrotate/sbin/logrotate 复制到开发板的/sbin目录</p><p>编写一个配置文件,存放到开发板的/etc目录下，名称为logrotate.cfg<br>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/var/log/testlog.log &#123;</span><br><span class="line">     size=100k</span><br><span class="line">     rotate 2</span><br><span class="line">     postrotate</span><br><span class="line">                    /usr/bin/killall -HUP syslogd</span><br><span class="line">     endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>脚本的功能为监控/var/log/testlog.log,当该文件大于100k时，备份，最多备份2次，每次备份时，会kill掉syslogd，不过syslogd是会自动重启的不用担心</p><p>之后还需要启动一个定时任务来周期性调用logrotate命令</p><p>首先在开发板上创建/etc/cron目录<br>开机脚本写上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crond -c /etc/cron</span><br><span class="line">crontab -c /etc/cron /etc/cron/logrotate</span><br></pre></td></tr></table></figure></p><p>开机脚本每个系统都不太一样，就不说了<br>之后编写一个cron的配置文件放在/etc/cron目录下，文件名为logrotate<br>内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * logrotate /etc/logrotate.cfg</span><br></pre></td></tr></table></figure></p><p>内容的意思是每分钟执行一次logrotate，这样就可以自动备份转存日志了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用git上传并自动部署服务端代码</title>
      <link href="/2019/04/29/%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/04/29/%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="一、git服务器搭建"><a href="#一、git服务器搭建" class="headerlink" title="一、git服务器搭建"></a>一、git服务器搭建</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><code>apt-get install git</code></p><h2 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">passwd git  //修改git用户密码</span><br></pre></td></tr></table></figure><h2 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home</span><br><span class="line">$ mkdir git</span><br><span class="line">$ mkdir ./git/.ssh</span><br><span class="line">$ touch./git/.ssh/authorized_keys</span><br><span class="line">$ cd /home/git</span><br><span class="line">$ git init --bare test.git    //初始化仓库</span><br><span class="line">$ chown -R git:git ../git</span><br><span class="line">$ chmod 700 .ssh  // 需要设置成700，否则公钥认证会提示 (Permission denied)</span><br><span class="line">$ chmod 600 .ssh/authorized_key // 需要设置成600，否则公钥认证会提示 (Permission denied)</span><br></pre></td></tr></table></figure><h2 id="使用git用户生成git密钥"><a href="#使用git用户生成git密钥" class="headerlink" title="使用git用户生成git密钥"></a>使用git用户生成git密钥</h2><p>把客户端的公钥（id_rsa.pb文件内容）添加到authorized_keys文件，git push操作就不需要每次都输入密码了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u git ssh-keygen -t rsa -C “test@qq.com”   //生成密钥</span><br><span class="line">$ cd /home/git/.ssh</span><br><span class="line">$ cat id_rsa.pub&gt;&gt;authorized_keys  //把公钥加入authorized_keys文件</span><br></pre></td></tr></table></figure><h2 id="创建web目录"><a href="#创建web目录" class="headerlink" title="创建web目录"></a>创建web目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home</span><br><span class="line">$ git clone ssh://git@127.0.0.1/home/git/test.git   //因为我的web服务器与git服务器是同一台主机所以使用127.0.0.1,如果不是放在同一台主机的请使用公网ip</span><br><span class="line">$ chown -R git:git test    //test目录拥有设为git(如果test有其他的拥有者，可以把git加入其目录拥有者的组)</span><br></pre></td></tr></table></figure><h2 id="编写自动更新钩子"><a href="#编写自动更新钩子" class="headerlink" title="编写自动更新钩子"></a>编写自动更新钩子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home/git/test.git/hooks/</span><br><span class="line">$ vim post-receive</span><br></pre></td></tr></table></figure><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">DIR=/home/test</span><br><span class="line">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class="line"># 直接强制检出 </span><br><span class="line">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure></p><h2 id="给钩子文件添加执行权限"><a href="#给钩子文件添加执行权限" class="headerlink" title="给钩子文件添加执行权限"></a>给钩子文件添加执行权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home/git/test.git/hooks/</span><br><span class="line">$ chmod +x post-receive  //给钩子文件添加执行权限</span><br></pre></td></tr></table></figure><h1 id="二、客户端测试验证"><a href="#二、客户端测试验证" class="headerlink" title="二、客户端测试验证"></a>二、客户端测试验证</h1><h2 id="生成客户端密钥"><a href="#生成客户端密钥" class="headerlink" title="生成客户端密钥"></a>生成客户端密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “test@qq.com”   //生成密钥</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub 服务器ip //将密钥上传到服务，以后就可以不用输密码了</span><br></pre></td></tr></table></figure><p>然后把git仓库拷贝下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@123.456.78.9/home/git/test.git</span><br></pre></td></tr></table></figure></p><p>测试操作<br>git push完成后git自动对web目录做git pull操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd test</span><br><span class="line">git pull origin master</span><br><span class="line">touch test.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m&apos;test&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>syslog使用方法</title>
      <link href="/2019/04/28/syslog%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/28/syslog%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>三个函数的原型和说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void openlog(char *ident,int option,int facility);</span><br><span class="line">void syslog(int priority,char *format,   ...);</span><br><span class="line">void closelog();</span><br></pre></td></tr></table></figure></p><p>log以<strong>时间，标题，内容</strong>组成<br>log的生成路径可以通过修改配置文件来改变<br>以下先看代码写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;syslog.h&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">//如果使用的是syslogd服务，则需要添加多线程锁，如果是使用rsyslog,则不需要</span><br><span class="line">pthread_mutex_t infoLock=PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">#define NoticeLog(format,args...) \</span><br><span class="line">&#123; \</span><br><span class="line">pthread_mutex_lock(&amp;infoLock); \</span><br><span class="line">    openlog(&quot;demo&quot;,0,LOG_LOCAL0); \</span><br><span class="line">    syslog(LOG_INFO,format, ## args); \</span><br><span class="line">    pthread_mutex_unlock(&amp;infoLock); \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">NoticeLog(&quot;a=%s&quot;,&quot;1111111111&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码会生成的以下这样的log<br>Apr 28 11:00:41.850  demo: 1111111111</p><p>如果没有配置文件的话，log默认会输出到/var/log/message下</p><p><strong>配置文件</strong>的格式为   facility.priority   action，这些字段的定义如下：  </p><p><strong>facility</strong><br>  指定产生消息的子系统。facility   有效的关键字有   auth、authpriv、cron、daemon、kern、lpr、mail、news、syslog、user、uucp   以及   local0   到   local7。  </p><p><strong>priority</strong><br>  指定消息的最低严重性，即此优先级和高于此优先级的消息将由这个规则匹配。priority   的有效关键字有   debug、info、notice、warning、err、crit、alert   和   emerg。  </p><p><strong>action</strong><br>  action   字段可以是文件名、tty（如   /dev/console）、以   @   为前缀的远程机器、以逗号分隔的用户列表，或是   *   以表明向所有登录用户发送消息。最常见的操作是一个简单的文件名。  </p><p>以下是例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">local0.info    /root/app/data/info.log</span><br><span class="line">local0.info    @192.168.162.245</span><br><span class="line">local0.notice    /root/app/data/info1.log</span><br><span class="line">local1.*    /root/app/data/notice.log</span><br><span class="line">local2.*    /root/app/data/debug.log</span><br><span class="line">local3.*    /root/app/data/warning.log</span><br><span class="line">local4.*    /root/app/data/error.log</span><br><span class="line">local5.*    /root/app/data/crit.log</span><br><span class="line">local6.*    /root/app/data/alert.log</span><br><span class="line">kern.*      /var/log/message</span><br><span class="line">user.*      /var/log/message</span><br></pre></td></tr></table></figure></p><p>local0-7一般由用户自定义使用<br>配置文件上配置有@ip的，则是将log发送到指定的机器上，默认是发到514的udp端口<br>其它则是将log写到不同文件中</p><p>如下代码的意思是，将log输出到locall0.notice配置对应的文件里<br>其中demo是此条log的名称，可以自定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openlog(&quot;demo&quot;,0,LOG_LOCAL0); </span><br><span class="line">syslog(LOG_NOTICE,format, ## args);</span><br></pre></td></tr></table></figure></p><p>系统一般会启动一个syslogd进程，不带配置文件的，所以我们需要修改启动项<br>添加syslogd -f /etc/syslog.cfg -n &amp;  作为启动条件<br>当更新了配置文件以后，也需要手动重新启动syslogd服务</p><p>log的文件大小是不作限制的，所以还需要配合logrotate 使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>配置工具信息</title>
      <link href="/2019/04/26/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/04/26/%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><strong>PS：每个版本都对应于SDK版本，不一定都兼容</strong></p><p><strong>版本：201900708</strong><br>最低SDK版本：16<br>改动：<br>1.添加自定义的数据监控配置<br>2.修复读取设备配置表不刷新问题<br>点击下载：<a href="/tools/配置工具-20190708.rar">配置工具-20190708</a></p><p><strong>版本：20190428</strong><br>最低SDK版本：16<br>改动：<br>1.添加目标机器的syslog展示与过滤，需要本机作为log的服务器，<br>所以使用的时候目标机器要能ping通本机<br>点击下载：<a href="/tools/配置工具-20190428.rar">配置工具-20190428</a></p><p><strong>版本：20190426</strong><br>最低SDK版本：16<br>改动：<br>1.实时数据页现在只传输当前选择的设备数据，持续一分钟<br>可通过点击表格内的点来刷新持续时间<br>2.程序设置信息管理已升级，支持保存中文注释信息，通过双击表格内条目更新<br>3.添加内存数据查看的滚动条<br>4.修复服务列表读取与写入</p><p>点击下载：<a href="/tools/配置工具-20190426.rar">配置工具-20190426</a></p><p><strong>版本：20190419</strong><br>最低SDK版本：15<br>改动：<br>1.添加内存数据查看指令<br>2.优化窗口退出<br>点击下载：<a href="/tools/配置工具-20190419.rar">配置工具-20190419</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo 生成个人博客</title>
      <link href="/2019/04/25/%E4%BD%BF%E7%94%A8hexo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/04/25/%E4%BD%BF%E7%94%A8hexo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>if hexo version == 3.6<br>npm install hexo-server</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用指南</title>
      <link href="/2019/04/25/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/04/25/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>git 是一个开源的分布式版本控制系统，是Linus Torvalds 为了帮助管理Linux内核开发而开发的，适用于各种大大小小的项目版本管理</p><p>分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆，在本地机器上拷贝一个完整的Git仓库</p><p>首先来说一下基本使用流程<br>1.从服务器上克隆完整的代码仓库<br>git clone <a href="http://192.168.162.180:/git/charge" target="_blank" rel="noopener">http://192.168.162.180:/git/charge</a></p><p>2.在自己的机器上根据不同的开发目的，创建分支，修改代码<br>git branch charge //创建了一个与服务器同名的本地仓库，作为自己的工作仓库，也可以命名为其它的，一般情况下，分支的默认名为master</p><p>3.修改完代码后，将修改提交到本地仓库<br>git commit -a -m “修改记录”    //-m参数后面接的是之前修改过的内容描述</p><p>4.上传到服务器<br>git push origin master //origin 代表远程服务器的别名，默认情况下是origin,master为默认分支名</p><p>以上4步为第一次使用的场景，后面介绍使用过程中的一些命令</p><p>1.查看远程服务器别名<br>git remote -v</p><p>2.添加远程服务器<br>git remote add xxx <a href="http://xxx.com/xxx" target="_blank" rel="noopener">http://xxx.com/xxx</a></p><p>3.查看所有分支<br>git branch -a //前面带星号的为当前分支</p><p>4.创建分支<br>git branch xxx  //以当前分支为起点，创建一个新的分支</p><p>5.重置分支<br>git reset –hard  //如果修改了很多东西，又觉得不满意，可以一键重置所有改动</p><p>6.合并远程服务器最新代码<br>git pull origin master //如果本地的文件与服务器上的有差异，但差异点不一样，会自动合并成一个新的文件，如果差异点都在同一个地方，则需要手动合并，将冲突的地方修改好后，重新提交，上传到服务器</p><p>7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库7.忽略文件权限<br>git config core.filemode false //当前版本<br>git config –global core.fileMode false //所有版本库</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache+php搭建经历</title>
      <link href="/2017/03/29/apache-php%E6%90%AD%E5%BB%BA%E7%BB%8F%E5%8E%86/"/>
      <url>/2017/03/29/apache-php%E6%90%AD%E5%BB%BA%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>最近公司使用的嵌入式网页服务器来做web开发，boa+cgi的，用起来太恶心了，所以。。。<br>网上转了一圈，现在比较流行apache+php呀，那咱也造一个呗</p><p>先下载些材料 ，列表如下：<br>apache 2.4.6一份,地址：<a href="http://archive.apache.org/dist/httpd/httpd-2.4.6.tar.gz" target="_blank" rel="noopener">http://archive.apache.org/dist/httpd/httpd-2.4.6.tar.gz</a><br>apr 1.5.2一份，地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-1.5.2.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-1.5.2.tar.gz</a><br>apr-util 1.5.4 一份，地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-util-1.5.4.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache//apr/apr-util-1.5.4.tar.gz</a><br>pcre-8.37一份，地址：<a href="https://ftp.pcre.org/pub/pcre/pcre-8.37.tar.gz" target="_blank" rel="noopener">https://ftp.pcre.org/pub/pcre/pcre-8.37.tar.gz</a><br>php-5.5.38一份，地址：<a href="http://cn.php.net/distributions/php-5.5.38.tar.gz" target="_blank" rel="noopener">http://cn.php.net/distributions/php-5.5.38.tar.gz</a><br>libxml2</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux C编程:打造一个插件系统</title>
      <link href="/2017/03/07/Linux-C%E7%BC%96%E7%A8%8B-%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2017/03/07/Linux-C%E7%BC%96%E7%A8%8B-%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>运行环境：linux<br>使用语言：c 或者c++</p><p>插件，很多人用过，比如游戏插件，编辑器插件这些，<br>最著名的就数魔兽大脚插件啦，还有vim插件啦，eclipse插件啦，等等<br>插件有很多种形式，最常见的就是so文件，在windows上就是各种的dll啦</p><p>下面就让我们来了解一下插件式编程吧〜〜</p><p>举个例子，你开发了一个游戏，一开始只有三个关卡，分享给了你的小伙伴玩<br>大家玩得很爽，但很快，游戏通关了，还想玩，这时候怎么办呢？<br>常规做法就是再加两关，然后编译之后，再发给大家，那么问题就来了<br>每次想加新关卡，都需要重新编译一次，再下载一次，这个流量嘛，1+1.1+1.2+1.3,每次加个0.1,都够你受的^_^<br>这个时候嘛，就要引入插件系统了</p><p>咱先来写个小程序<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"game.h"</span> <span class="comment">//关于游戏的定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我打，我打，我打打打\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMission</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initGame();<span class="comment">//初始化游戏</span></span><br><span class="line"><span class="keyword">int</span> missionNum=loadMission();<span class="comment">//读取关卡数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> missionNo=getchar();<span class="comment">//选择关卡</span></span><br><span class="line">missionNo=missionNo-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(missionNo&gt;missionNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"没有此关卡!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">play();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是一个可扩展的游戏架构，够简单吧〜</p><p>下面咱就开始设计这个游戏系统的插件吧</p><p>在这里，游戏关卡就是我们的插件，一个插件就是一个关卡<br>先讲讲一个插件的构造吧<br>首先是这个关卡的描述，比如名称，难度等<br>其次就是这个关卡游戏过程了<br>最后，就是玩关卡的人</p><p>按照以上描述，咱定几个结构体吧<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//game.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//游戏玩家描述</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">player</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> life;<span class="comment">//玩家生命</span></span><br><span class="line">&#125;Player;</span><br><span class="line"><span class="comment">//游戏关卡描述</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">mission</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> level;<span class="comment">//关卡难度</span></span><br><span class="line"><span class="keyword">char</span> missionName[<span class="number">30</span>];<span class="comment">//关卡名称</span></span><br><span class="line"><span class="keyword">void</span> (*process)(Player *);<span class="comment">//游戏过程</span></span><br><span class="line">&#125;Mission;</span><br><span class="line"></span><br><span class="line">好了，下面就是一个插件的具体内容</span><br><span class="line">```c</span><br><span class="line"><span class="comment">//game.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"game.h"</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> name[]=<span class="string">"第一关，插件入门"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> level=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">firstMission</span><span class="params">(Player *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"oh my god ,somebody hurt me!\n"</span>);</span><br><span class="line">    p-&gt;life--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"now my life is %d\n"</span>,p-&gt;life);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gameInfo</span><span class="params">(Mission *m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m-&gt;level=level;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(name);</span><br><span class="line"><span class="built_in">memcpy</span>(m-&gt;missionName,name,len+<span class="number">1</span>);<span class="comment">//注意游戏名称不要太长</span></span><br><span class="line">m-&gt;process=firstMission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ok,以上就是一个关卡的所有东西了，虽然看着简单，不过还是建议动手敲敲^_^</p><p>那我们先把这个插件制作出来吧，免得一会忘记了，在终端下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc  game.c -fPIC -shared -o firstMission.so -ldl</span><br></pre></td></tr></table></figure></p><p>linux和mac都一样</p><p>关卡设计好了，接下来就是怎么样读取我们做好的关卡了</p><p>现在实现咱们就loadMission()函数</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">Mission mission[<span class="number">50</span>];</span><br><span class="line">int loadMission()</span><br><span class="line">&#123;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    fp = fopen(<span class="string">"missionList.txt"</span>, <span class="string">"r"</span>);<span class="comment">//读取关卡列表文件</span></span><br><span class="line">    if (<span class="literal">NULL</span>== fp)    </span><br><span class="line">    &#123;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ret=<span class="number">0</span>;</span><br><span class="line">    char namelist[<span class="number">50</span>][<span class="number">50</span>];<span class="comment">//最多50个插件，每个插件的名字长度最多50</span></span><br><span class="line">    memset(namelist,<span class="number">0</span>,sizeof(namelist));</span><br><span class="line"></span><br><span class="line">    int count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    while(fgets((char *)<span class="meta">&amp;namelist[count], 50, fp)) </span></span><br><span class="line">    &#123;</span><br><span class="line">        ret=strlen(namelist[count]);<span class="comment">//计算实际字符串长度</span></span><br><span class="line">        if(namelist[count][ret-<span class="number">1</span>]=='\n')</span><br><span class="line">            namelist[count][ret-<span class="number">1</span>]='\0';<span class="comment">//fgets会读多一个换行，所以需要替换掉</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125; </span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    ret=<span class="number">0</span>;<span class="comment">//用于累加错误次数</span></span><br><span class="line">    for(int i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    const char *errmsg;</span><br><span class="line"></span><br><span class="line">        dlerror();  <span class="comment">// 清除错误</span></span><br><span class="line">        void *m_hLib = (void *)dlopen(namelist[i], RTLD_LAZY);<span class="comment">//读取插件</span></span><br><span class="line">        </span><br><span class="line">        if( (errmsg = dlerror()) != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//printf("err=%s\n",errmsg);打印错误</span></span><br><span class="line">        ret++;<span class="comment">//累加错误次数</span></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( m_hLib == <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        ret++;<span class="comment">//累加错误次数</span></span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dlerror();  <span class="comment">// 清除错误</span></span><br><span class="line">        Info info = (Info)dlsym( m_hLib, <span class="string">"gameInfo"</span> );<span class="comment">//提取出插件里面的函数</span></span><br><span class="line">        if( (errmsg = dlerror()) != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            dlclose(m_hLib);</span><br><span class="line">printf(<span class="string">"err=%s\n"</span>,errmsg);</span><br><span class="line">            ret++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        info(<span class="meta">&amp;mission[i]);<span class="comment">//获取到关卡数据</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    ret=<span class="number">0</span>;<span class="comment">//关卡号</span></span><br><span class="line">    <span class="comment">//展示下关卡</span></span><br><span class="line">    for(int i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    if(mission[i].level!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    printf(<span class="string">"%d.%s\n"</span>,ret+<span class="number">1</span>,mission[i].missionName);/正式发布的时候就不要啦〜〜</span><br><span class="line">    ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count=count-ret;<span class="comment">//计算有效关卡数</span></span><br><span class="line">    return count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，上面的代码，不难吧？咱编译一下，就可以跑了<br>linux下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o game main.c -Wl,rpath=.</span><br></pre></td></tr></table></figure></p><p>mac下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o game main.c -Wl,rpath . -dynamic</span><br></pre></td></tr></table></figure></p><p>再准备一个游戏菜单文件，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo firstMission.so &gt;missionlist.txt</span><br></pre></td></tr></table></figure></p><p>好了，再执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./game</span><br></pre></td></tr></table></figure></p><p>一切顺利的话，你应该能看到自己的关卡列表了〜<br>接下来干嘛呢？我们现在仅仅是提取出了关卡的名字，还没开始玩游戏呢<br>以下是改动后的main.c文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;dlfcn.h&gt;</span><br><span class="line">#include &quot;game.h&quot; //关于游戏的定义</span><br><span class="line"></span><br><span class="line">Mission mission[50];</span><br><span class="line">void initGame()</span><br><span class="line">&#123;</span><br><span class="line">    memset(mission,0,sizeof(mission));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int loadMission()</span><br><span class="line">&#123;</span><br><span class="line">    FILE * fp;</span><br><span class="line">    fp = fopen(&quot;missionList.txt&quot;, &quot;r&quot;);//读取关卡列表文件</span><br><span class="line">    if (NULL== fp)    </span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ret=0;</span><br><span class="line">    char namelist[50][50];//最多50个插件，每个插件的名字长度最多50</span><br><span class="line">    memset(namelist,0,sizeof(namelist));</span><br><span class="line">    int count=0;</span><br><span class="line">    while(fgets((char *)&amp;namelist[count], 50, fp)) </span><br><span class="line">    &#123;</span><br><span class="line">        ret=strlen(namelist[count]);//计算实际字符串长度</span><br><span class="line">        if(namelist[count][ret-1]==&apos;\n&apos;)</span><br><span class="line">            namelist[count][ret-1]=&apos;\0&apos;;//fgets会读多一个换行，所以需要替换掉</span><br><span class="line">        count++;</span><br><span class="line">    &#125;    </span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    ret=0;</span><br><span class="line">    for(int i=0;i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        const char *errmsg;</span><br><span class="line"></span><br><span class="line">        dlerror();  // 清除错误</span><br><span class="line">        void *m_hLib = (void *)dlopen(namelist[i], RTLD_LAZY);</span><br><span class="line">        </span><br><span class="line">        if( (errmsg = dlerror()) != NULL )</span><br><span class="line">        &#123;</span><br><span class="line">            //printf(&quot;err=%s\n&quot;,errmsg);打印错误</span><br><span class="line">            ret++;//累加错误次数</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( m_hLib == NULL )</span><br><span class="line">        &#123;</span><br><span class="line">            ret++;//累加错误次数</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dlerror();  // 清除错误</span><br><span class="line">        Info info = (Info)dlsym( m_hLib, &quot;gameInfo&quot; );</span><br><span class="line">        if( (errmsg = dlerror()) != NULL )</span><br><span class="line">        &#123;</span><br><span class="line">            dlclose(m_hLib);</span><br><span class="line">            printf(&quot;err=%s\n&quot;,errmsg);</span><br><span class="line">            ret++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        info(&amp;mission[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //展示下关卡</span><br><span class="line">    for(int i=0;i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(mission[i].level!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d.%s\n&quot;,i+1,mission[i].missionName);//正式发布的时候就不要啦〜〜</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count=count-ret;//计算有效关卡数</span><br><span class="line">    return count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    initGame();//初始化游戏  </span><br><span class="line">    int missionNum=loadMission();//读取关卡数</span><br><span class="line">    if(missionNum==0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;游戏异常退出\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //初始化一个角色，并满血</span><br><span class="line">    Player p;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        p.life=100;</span><br><span class="line">        printf(&quot;请选择关卡\n&quot;);</span><br><span class="line">        for(int i=0;i&lt;missionNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d.%s\n&quot;,i+1,mission[i].missionName);</span><br><span class="line">        &#125;</span><br><span class="line">        int missionNo=getchar();//选择关卡</span><br><span class="line"></span><br><span class="line">        missionNo=missionNo-&apos;0&apos;;</span><br><span class="line">        if(missionNo&gt;missionNum || missionNo&lt;1)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;没有此关卡!\n&quot;);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //读取来的关卡肯定是有难度等级的，没有就是无效关卡</span><br><span class="line">        if(mission[missionNo-1].level!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            while(p.life&gt;0)</span><br><span class="line">                mission[missionNo-1].process(&amp;p);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Game Over!\n\n\n&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个完整的游戏啦，感兴趣的同学可以继续扩展哟〜〜后面就是不断得出扩展啦</p><p>你问我怎么扩展？<br>好吧，自己把game.c里面的内容改改，然后编译出来，换个名字，然后在missionlist.txt里面加一行，就ok了</p><p>还不懂？那你只能给我打赏了^_^</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Qt输出中文文件名乱码的问题</title>
      <link href="/2017/03/07/%E5%85%B3%E4%BA%8EQt%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/03/07/%E5%85%B3%E4%BA%8EQt%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近为项目添加一个电能数据导出的功能<br>导出的格式为csv,一开始文件名是1.csv,2.csv这样的，不过客户不满意呀〜〜<br>那只能改成带有中文的呗</p><p>环境：嵌入式linux<br>文件编码:utf-8</p><p>QFile f;<br>QString head=QString(“time,current,voltage,activePower,reactivePower,energy\n”);<br>QString name=QString(“%1/直流支路%2数据.csv”).arg(“data”).arg(i+1);<br>QString energyData=”12344”;<br>f.setFileName(name);<br>f.open(QIODevice::WriteOnly);<br>f.write(head.toLocal8Bit());<br>f.write(energyData.toUtf8());<br>f.close();</p><p>在嵌入式linux下，输出的文件名是乱码〜，因为在嵌入式linux下没有做中文处理<br>不要紧，把文件输出到windows就行<br>有一点要注意，这块代码的编码必须是utf-8的。。。<br>平时我处理中文的时候，一般都会使用gbk编码来存代码，结果嘛，各种乱码输出。。。</p><p>这段代码唯一不足的就是head不能是中文，残念。。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
